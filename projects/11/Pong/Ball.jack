// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/11/Pong/Ball.jack

/**
 * A graphical ball. Characterized by a screen location and distance of 
 * last destination. Has methods for drawing, erasing and moving on the screen.
 * The ball is displayed as a filled, 6-by-6 pixles rectangle. 
 */
class Ball {

    field int x, y;               // the ball's screen location (in pixels)
    field int lengthx, lengthy;   // distance of last destination (in pixels)

    field int d, straightD, diagonalD;            // used for straight line movement computation
    field boolean invert, positivex, positivey;   // (same)
   
    field int leftWall, rightWall, topWall, bottomWall;  // wall locations
   
    field int wall;   // last wall that the ball was bounced off of

    /** Constructs a new ball with the given initial location and wall locations. */
    constructor Ball new(int Ax, int Ay,
                         int AleftWall, int ArightWall, int AtopWall, int AbottomWall) {    	
	     x = Ax;		
	     y = Ay;
	     leftWall = AleftWall;
	     rightWall = ArightWall - 6;    // -6 for ball size
	     topWall = AtopWall; 
	     bottomWall = AbottomWall - 6;  // -6 for ball size
	     wall = 0;
         show();
        return this;
    }

    /** Deallocates the Ball's memory. */
    method void dispose() {
         Memory.deAlloc(this);
        return;
    }

    /** Shows the ball. */
    method void show() {
         Screen.setColor(true);
         draw();
        return;
    }

    /** Hides the ball. */
    method void hide() {
         Screen.setColor(false);
	     draw();
        return;
    }

    /** Draws the ball. */
    method void draw() {
	     Screen.drawRectangle(x, y, x + 5, y + 5);
	    return;
    }

    /** Returns the ball's left edge. */
    method int getLeft() {
        return x;
    }

    /** Returns the ball's right edge. */
    method int getRight() {
        return x + 5;
    }

    /** Computes and sets the ball's destination. */
    method void setDestination(int destx, int desty) {
        var int dx, dy, temp;
  	     lengthx = destx - x;
	     lengthy = desty - y;
         dx = Math.abs(lengthx);
         dy = Math.abs(lengthy);
         invert = (dx < dy);

        if (invert) {
             temp = dx; // swap dx, dy
             dx = dy;
             dy = temp;
   	         positivex = (y < desty);
             positivey = (x < destx);
        }
        else {
	         positivex = (x < destx);
             positivey = (y < desty);
        }

         d = (2 * dy) - dx;
         straightD = 2 * dy;
         diagonalD = 2 * (dy - dx);

	    return;
    }

    /**
     * Moves the ball one unit towards its destination.
     * If the ball has reached a wall, returns 0.
     * Else, returns a value according to the wall:
     * 1 (left wall), 2 (right wall), 3 (top wall), 4 (bottom wall).
     */
    method int move() {

	     hide();

        if (d < 0) {  d = d + straightD; }
        else {
             d = d + diagonalD;

            if (positivey) {
                if (invert) {  x = x + 4; }
                else {  y = y + 4; }
            }
            else {
                if (invert) {  x = x - 4; }
                else {  y = y - 4; }
            }
	    }

        if (positivex) {
            if (invert) {  y = y + 4; }
            else {  x = x + 4; }
	    }
	    else {
            if (invert) {  y = y - 4; }
            else {  x = x - 4; }
	    }

	    if (~(x > leftWall)) {
	         wall = 1;    
	         x = leftWall;
	    }
        if (~(x < rightWall)) {
	         wall = 2;    
	         x = rightWall;
	    }
        if (~(y > topWall)) {
             wall = 3;    
	         y = topWall;
        }
        if (~(y < bottomWall)) {
             wall = 4;    
	         y = bottomWall;
        }

	     show();

	    return wall;
    }

    /**
     * Bounces off the current wall: sets the new destination
     * of the ball according to the ball's angle and the given
     * bouncing direction (-1/0/1=left/center/right or up/center/wn).
     */
    method void bounce(int bouncingDirection) {
        var int newx, newy, divLengthx, divLengthy, factor;

	    // dividing by 10 first since results are too big
         divLengthx = lengthx / 10;
         divLengthy = lengthy / 10;
	    if (bouncingDirection = 0) {  factor = 10; }
	    else {
	        if (((~(lengthx < 0)) & (bouncingDirection = 1)) | ((lengthx < 0) & (bouncingDirection = (-1)))) {
                 factor = 20; // bounce direction is in ball direction
            }
	        else {  factor = 5; } // bounce direction is against ball direction
	    }

	    if (wall = 1) {
	         newx = 506;
	         newy = (divLengthy * (-50)) / divLengthx;
             newy = y + (newy * factor);
	    }
        else {
            if (wall = 2) {
                 newx = 0;
                 newy = (divLengthy * 50) / divLengthx;
                 newy = y + (newy * factor);
	        }
	        else {
                if (wall = 3) {
		             newy = 250;
		             newx = (divLengthx * (-25)) / divLengthy;
                     newx = x + (newx * factor);
		        }
                else { // assumes wall = 4
		             newy = 0;
		             newx = (divLengthx * 25) / divLengthy;
                     newx = x + (newx * factor);
		        }
            }
        }

         setDestination(newx, newy);
        return;
    }
}
