function Math.init 0
push constant 16
call Array.new 1
pop static 0
push constant 0
push static 0
add
push constant 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 1
push static 0
add
push constant 2
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 2
push static 0
add
push constant 4
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 3
push static 0
add
push constant 8
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 4
push static 0
add
push constant 16
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 5
push static 0
add
push constant 32
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 6
push static 0
add
push constant 64
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 7
push static 0
add
push constant 128
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 8
push static 0
add
push constant 256
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 9
push static 0
add
push constant 512
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 10
push static 0
add
push constant 1024
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 11
push static 0
add
push constant 2048
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 12
push static 0
add
push constant 4096
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 13
push static 0
add
push constant 8192
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 14
push static 0
add
push constant 16384
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 15
push static 0
add
push constant 32767
push constant 1
add
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 0
return
function Math.bitMask 0
push argument 0
push constant 1
neg
gt
push argument 0
push constant 16
lt
and
if-goto Math_bitMask_IF_TRUE_L2
goto Math_bitMask_IF_FALSE_L2
label Math_bitMask_IF_TRUE_L2
push argument 0
push static 0
add
pop pointer 1
push that 0
return
label Math_bitMask_IF_FALSE_L2
push constant 0
return
function Math.abs 0
push argument 0
push constant 0
lt
if-goto Math_abs_IF_TRUE_L4
goto Math_abs_IF_FALSE_L4
label Math_abs_IF_TRUE_L4
push argument 0
neg
return
label Math_abs_IF_FALSE_L4
push argument 0
return
function Math.multiply 9
push argument 1
call Math.abs 1
pop local 5
push argument 0
call Math.abs 1
pop local 6
push local 5
push local 6
gt
if-goto Math_multiply_IF_TRUE_L8
goto Math_multiply_IF_FALSE_L8
label Math_multiply_IF_TRUE_L8
push local 6
pop local 0
push local 5
pop local 6
push local 0
pop local 5
label Math_multiply_IF_FALSE_L8
push local 6
pop local 2
push local 5
push constant 1
add
pop local 3
push constant 1
pop local 4
push argument 0
push constant 0
lt
pop local 7
push argument 1
push constant 0
lt
pop local 8
label Math_multiply_WHILE_EXP_L2
push local 4
push local 3
lt
not
if-goto Math_multiply_WHILE_END_L2
push local 5
push local 4
and
if-goto Math_multiply_IF_TRUE_L9
goto Math_multiply_IF_FALSE_L9
label Math_multiply_IF_TRUE_L9
push local 1
push local 2
add
pop local 1
label Math_multiply_IF_FALSE_L9
push local 2
push local 2
add
pop local 2
push local 4
push local 4
add
pop local 4
goto Math_multiply_WHILE_EXP_L2
label Math_multiply_WHILE_END_L2
push local 7
push local 8
eq
not
if-goto Math_multiply_IF_TRUE_L10
goto Math_multiply_IF_FALSE_L10
label Math_multiply_IF_TRUE_L10
push local 1
neg
return
label Math_multiply_IF_FALSE_L10
push local 1
return
function Math.divide 0
push argument 0
push constant 0
lt
push argument 1
push constant 0
lt
eq
not
if-goto Math_divide_IF_TRUE_L12
goto Math_divide_IF_FALSE_L12
label Math_divide_IF_TRUE_L12
push argument 0
call Math.abs 1
push argument 1
call Math.abs 1
call Math.divideAbs 2
neg
return
label Math_divide_IF_FALSE_L12
push argument 0
call Math.abs 1
push argument 1
call Math.abs 1
call Math.divideAbs 2
return
function Math.divideAbs 2
push argument 0
push constant 0
eq
push argument 1
push argument 0
gt
or
push argument 1
push constant 1
lt
or
if-goto Math_divideAbs_IF_TRUE_L15
goto Math_divideAbs_IF_FALSE_L15
label Math_divideAbs_IF_TRUE_L15
push constant 0
return
label Math_divideAbs_IF_FALSE_L15
push constant 2
push argument 1
call Math.multiply 2
pop local 1
push argument 0
push local 1
call Math.divideAbs 2
pop local 0
push argument 0
push local 1
push local 0
call Math.multiply 2
sub
push argument 1
lt
if-goto Math_divideAbs_IF_TRUE_L16
goto Math_divideAbs_IF_FALSE_L16
label Math_divideAbs_IF_TRUE_L16
push constant 2
push local 0
call Math.multiply 2
return
label Math_divideAbs_IF_FALSE_L16
push constant 2
push local 0
call Math.multiply 2
push constant 1
add
return
function Math.sqrt 4
push constant 7
pop local 1
push constant 0
pop local 0
push argument 0
call Math.abs 1
pop argument 0
push argument 0
push constant 32767
eq
if-goto Math_sqrt_IF_TRUE_L19
goto Math_sqrt_IF_FALSE_L19
label Math_sqrt_IF_TRUE_L19
push constant 181
return
label Math_sqrt_IF_FALSE_L19
label Math_sqrt_WHILE_EXP_L4
push local 1
push constant 1
neg
gt
not
if-goto Math_sqrt_WHILE_END_L4
push local 1
push static 0
add
pop pointer 1
push that 0
pop local 3
push local 0
push local 3
add
call Math.sqr 1
pop local 2
push local 2
push argument 0
push constant 1
add
lt
push local 2
push constant 0
gt
and
if-goto Math_sqrt_IF_TRUE_L20
goto Math_sqrt_IF_FALSE_L20
label Math_sqrt_IF_TRUE_L20
push local 0
push local 3
add
pop local 0
label Math_sqrt_IF_FALSE_L20
push local 1
push constant 1
sub
pop local 1
goto Math_sqrt_WHILE_EXP_L4
label Math_sqrt_WHILE_END_L4
push local 0
return
function Math.max 0
push argument 1
push argument 0
gt
if-goto Math_max_IF_TRUE_L22
goto Math_max_IF_FALSE_L22
label Math_max_IF_TRUE_L22
push argument 1
return
label Math_max_IF_FALSE_L22
push argument 0
return
function Math.min 0
push argument 1
push argument 0
lt
if-goto Math_min_IF_TRUE_L24
goto Math_min_IF_FALSE_L24
label Math_min_IF_TRUE_L24
push argument 1
return
label Math_min_IF_FALSE_L24
push argument 0
return
function Math.sqr 0
push argument 0
push argument 0
call Math.multiply 2
return
function Math.pow 1
push argument 1
push constant 1
lt
if-goto Math_pow_IF_TRUE_L28
goto Math_pow_IF_FALSE_L28
label Math_pow_IF_TRUE_L28
push constant 1
return
label Math_pow_IF_FALSE_L28
push argument 1
push constant 1
eq
if-goto Math_pow_IF_TRUE_L29
goto Math_pow_IF_FALSE_L29
label Math_pow_IF_TRUE_L29
push argument 0
return
label Math_pow_IF_FALSE_L29
push argument 0
push constant 2
eq
push argument 1
push constant 15
lt
and
if-goto Math_pow_IF_TRUE_L30
goto Math_pow_IF_FALSE_L30
label Math_pow_IF_TRUE_L30
push argument 1
push static 0
add
pop pointer 1
push that 0
return
label Math_pow_IF_FALSE_L30
push argument 1
push constant 1
sub
pop argument 1
label Math_pow_WHILE_EXP_L6
push local 0
push argument 1
lt
not
if-goto Math_pow_WHILE_END_L6
push argument 0
push argument 0
call Math.multiply 2
pop argument 0
push local 0
push constant 1
add
pop local 0
goto Math_pow_WHILE_EXP_L6
label Math_pow_WHILE_END_L6
push argument 0
return
function Math.mod 0
push argument 0
push argument 0
push argument 1
call Math.divide 2
push argument 1
call Math.multiply 2
sub
return
