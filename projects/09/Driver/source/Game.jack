
class Game
{
    field Array sprites;
    
    field int spriteCount;

    field int spriteCar;
    
    field int spriteLines;
    field int spriteLineFirst;

    field int spriteObstacles;
    field int spriteObstacleFirst;

    field int deaths;

    constructor Game new()
    {
        var int i;

        let deaths = 0;
        let spriteCount = 6;
        let sprites = Array.new( spriteCount );

        let i = 0;
        while ( i < spriteCount )
        {
            let sprites[i] = Sprite.new( 0 );
            let i = i + 1;
        }
        
        let spriteCar = spriteCount - 1; // car always draws last 

        let spriteLineFirst = 0;
        let spriteLines = 3;

        let spriteObstacleFirst = 3;
        let spriteObstacles = 2;

        do init();

        // Instructions stay present statically all the time
        do Output.moveCursor( 2, 2 );
        do Output.printString( "Arrows: Avoid Obstacles" );
        do Output.moveCursor( 3, 2 );
        do Output.printString( "Q: Quit" );

        return this;
    }

    /** Game.run: Runs the game until quit */
    method void run()
    {
        var boolean quit;

        let quit = false;

        while( ~quit )
        {
            if ( Keyboard.keyPressed() = 81 )
            {
                let quit = true;
            }

            do frame();
            do Sys.wait( 5 );
        }

        return;
    }

    /** Game.frame: Updates a single game frame */
    method void frame()
    {
        do clear();
        do update();
        do draw();

        return;
    }

    /** Game.init: Initializes/Resets game state */
    method void init()
    {
        do carInit();
        do linesInit();
        do obstaclesInit();

        return;
    }

    /** Game.clear: Clears the screen */
    method void clear()
    {
        var int i;
        var Sprite sprite;

        // clear all sprites
        let i = 0;
        while ( i < spriteCount )
        {
            let sprite = sprites[i];
            do sprite.clear();
            let i = i + 1;
        }

        return;
    }

    /** Game.update: changes the state of sprites */
    method void update()
    {
        var int i;
        var Sprite sprite;

        do carUpdate();
        do linesUpdate();
        do obstaclesUpdate();

        // update all sprites
        let i = 0;
        while ( i < spriteCount )
        {
            let sprite = sprites[i];
            do sprite.update();
            let i = i + 1;
        }

        return;
    }

    /** Game.draw: Presents all sprites */
    method void draw()
    {
        var int i;
        var Sprite sprite;

        // draw all sprites
        let i = 0;
        while ( i < spriteCount )
        {
            let sprite = sprites[i];
            do sprite.draw();
            let i = i + 1;
        }

        return;
    }

    /** Game.dispose: cleans up*/
    method void dispose()
    {
        var int i;
        var Sprite sprite;

        let i = 0;
        while ( i < spriteCount )
        {
            let sprite = sprites[i];
            do sprite.dispose();
            let i = i + 1;
        }
        do sprites.dispose();
        do Memory.deAlloc( this );
        return;
    }

    /** Game.carInit: initializes player car */
    method void carInit()
    {
        var Sprite sprite;
        let sprite = sprites[spriteCar];
        do sprite.setType( 0 ); // car
        do sprite.setXY( 256 - 8, 256 - 64 );
        do sprite.setCenterX( 64 );
        return;
    }

    /** Game.carUpdate: updates player car */
    method void carUpdate()
    {
        var int xVel, i;
        var Sprite carSprite;
        var Sprite obsSprite;
        var char key;

        let carSprite = sprites[spriteCar];
        let xVel = 0;
        let key = Keyboard.keyPressed();

        if ( key = 130 )
        {
            // moving left
            let xVel = xVel - 2;
        }

        if ( key = 132 )
        {
            // moving right
            let xVel = xVel + 2;
        }

        do carSprite.setVelocityX( xVel );

        // Check for collisions with obstacles
        let i = 0;
        while ( i < spriteObstacles )
        {
            let obsSprite = sprites[spriteObstacleFirst + i];
            if ( obsSprite.touching( carSprite ) )
            {
                // FIXME : add fancier respawn treatment
                let deaths = deaths + 1;
                do init();
                return;
            }
            let i = i + 1;
        }

        return;
    }

    /** Game.linesInit: initializes animated road lines*/
    method void linesInit()
    {
        var int i;
        var Sprite sprite;

        let i = 0;
        while ( i < spriteLines )
        {
            let sprite = sprites[spriteLineFirst + i];
            do sprite.setType( 1 ); // line
            do sprite.setXY( 256 - 8, ( i * 64 ) + 32);
            do sprite.setVelocity( 0, 2 );
            let i = i + 1;
        }
        return;
    }

    /** Game.linesUpdate: respawns road lines at top of screen when they reach the bottom */
    method void linesUpdate()
    {
        var int y;
        var int i;
        var Sprite sprite;

        let i = 0;

        // Keep the lines scrolling down the screen constantly
        while ( i < spriteLines )
        {
            let sprite = sprites[spriteLineFirst + i];
            let y = sprite.getY();

            if ( y > ( 256 - 17 ) )
            {
                do sprite.setY( 32 );
            }

            let i = i + 1;
        }
        return;
    }

    /** Game.obstaclesInit: initializes obstacles */
    method void obstaclesInit()
    {
        var int i;
        var Sprite sprite;

        let i = 0;
        while ( i < spriteObstacles )
        {
            let sprite = sprites[spriteObstacleFirst + i];
            do sprite.setXY( ( 256 - 32 - 16 ) + ( 64 * i ), ( 64 * i ) );
            do sprite.setVelocity( 0, 2 );
            let i = i + 1;
        }

        let sprite = sprites[spriteObstacleFirst + 0];
        do sprite.setType( 2 ); // oil slick

        let sprite = sprites[spriteObstacleFirst + 1];
        do sprite.setType( 0 ); // car

        return;
   }

    /** Game.obstaclesUpdate: updates obstacles*/
    method void obstaclesUpdate()
    {
        var int i, y, newX;
        var Sprite sprite;

        let i = 0;

        while ( i < spriteObstacles )
        {
            let sprite = sprites[spriteObstacleFirst + i];
            let y = sprite.getY();

            if ( y > ( 256 - 17 ) )
            {
                // Respawn obstacle at top of screen
                let newX = sprite.getX() + 32;
                
                if ( newX > ( 256 + 64 - 16 ) )
                {
                    let newX = 256 - 64;
                }

                do sprite.setXY( newX, 32 );
            }

            let i = i + 1;
        }

        return;
   }
}