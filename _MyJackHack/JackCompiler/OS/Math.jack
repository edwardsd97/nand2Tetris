// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math 
{
    static Array mBit;

    /** Initializes the library. */
    function void init() 
    {
        let mBit = Array.new( 16 );

        let mBit[ 0] =       1; // 0000 0000 0000 0001  
        let mBit[ 1] =       2; // 0000 0000 0000 0010
        let mBit[ 2] =       4; // 0000 0000 0000 0100
        let mBit[ 3] =       8; // 0000 0000 0000 1000

        let mBit[ 4] =      16; // 0000 0000 0001 0000
        let mBit[ 5] =      32; // 0000 0000 0010 0000
        let mBit[ 6] =      64; // 0000 0000 0100 0000
        let mBit[ 7] =     128; // 0000 0000 1000 0000

        let mBit[ 8] =     256; // 0000 0001 0000 0000
        let mBit[ 9] =     512; // 0000 0010 0000 0000
        let mBit[10] =    1024; // 0000 0100 0000 0000
        let mBit[11] =    2048; // 0000 1000 0000 0000

        let mBit[12] =    4096; // 0001 0000 0000 0000
        let mBit[13] =    8192; // 0010 0000 0000 0000
        let mBit[14] =   16384; // 0100 0000 0000 0000
        let mBit[15] = 32767+1; // 1000 0000 0000 0000 (-32768 after overflow)

        return;
    }

    /** Returns word bit mask with only the bit indicated set to 1. */
    function int bitMask(int bit) 
    {
        if ( ( bit > -1 ) & ( bit < 16 ) )
        {
            return mBit[bit];
        }

        return 0;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) 
    {
        if ( x < 0 )
        {
            return (-x);
        }

        return x;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int xIn, int yIn) 
    {
        /** Pseudo **
            sum = 0
            shiftedX = x
            for i = 0 ... w - 1 do
                if ( (i'ths bit of y) == 1 )
                    sum = sum + shiftedX
                shiftedX = shiftedX * 2
            return sum
        */
        var int temp, sum, shiftedX, absYPlusOne, bitMask;
        var int absY, absX, negX, negY;

        let absY = Math.abs( yIn );
        let absX = Math.abs( xIn );

        // Make sure y is the smaller of the two numbers ( just for efficiency )
        if ( absY > absX )
        {
            let temp = absX;
            let absX = absY;
            let absY = temp;
        }

        let shiftedX = absX;
        let absYPlusOne = absY + 1;
        let bitMask = 1;
        let negX = xIn < 0;
        let negY = yIn < 0;

        while ( bitMask < absYPlusOne )
        {
            if ( absY & bitMask )
            {
                let sum = sum + shiftedX;
            }

            let shiftedX = shiftedX + shiftedX;
            let bitMask = bitMask + bitMask;
        }

        if ( ~(negX = negY) ) // negX != negY
        {
            return -sum;
        }

        return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) 
    {
        if ( ~((x < 0) = (y < 0)) ) // signX != signY
        {
            return -(Math.divideAbs( Math.abs( x ), Math.abs( y ) ));
        }

        return Math.divideAbs( Math.abs( x ), Math.abs( y ) );
    }

    /** Returns the integer part of x/y where x and y must be >= 0. */
    function int divideAbs(int x, int y) 
    {
        /** Pseudo **
            if ( ( y > x ) | ( y < 0 ) )
                return 0
            q = divide( x, 2 * y )
            if ( ( x - ( 2 * q * y ) ) < y )
                return 2 * q
            else
                return ( 2 * q ) + 1
        */
        var int q;
        var int dblY;

        if ( ( x = 0 ) | ( y > x ) | ( y < 1 ) )
        {
            return 0;
        }

        let dblY = 2 * y;
        let q = Math.divideAbs( x, dblY );

        if ( ( x - ( dblY * q ) ) < y )
        {
            return 2 * q;
        }

        return ( 2 * q ) + 1;
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) 
    {
        /** Pseudo **
            note: pow(2,j) is mBit[j] in initialized table
            n = 16 ?
            y = 0
            for j = ((n/2) - 1) ... 0
                exp = sqr(y + pow(2,j))
                if exp <= x and exp > 0 
                    y = y + pow(2,j)
            return y
        */

        var int y, j, exp, bit;

        let j = 7; // smallest possible bit that can be squared and remain within 16 bit word
        let y = 0;

        let x = Math.abs( x );

        if ( x = 32767 )
        {
            // handle case where x + 1 overflows and becomes negative
            // 32767 + 1 is -32768 in 16 bit word architecture
            // the below algorithm would fail because of "exp < ( x + 1 )"
            return 181;
        }

        while ( j > -1 )
        {
            let bit = mBit[j];
            let exp = Math.sqr( y + bit );
            if ( ( exp < ( x + 1 ) ) & ( exp > 0 ) )
            {
                let y = y + bit;
            }
            let j = j - 1;
        }

        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) 
    {
        if ( b > a )
        {
            return b;
        }

        return a;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) 
    {
        if ( b < a )
        {
            return b;
        }

        return a;
    }

    /** Returns x squared. */
    function int sqr(int x) 
    {
        return x * x;
    }

    /** Returns x to the power of y */
    function int pow(int x, int y) 
    {
        var int i;

        if ( y < 1 ) // y <= 0 
        {
            // anything to the power of 0 is 1
            return 1;
        }
        
        if ( y = 1 )
        {
            // anything to the power of 1 is itself
            return x;
        }

        if ( ( x = 2 ) & ( y < 15 ) )
        {
            // powers of 2 have a lookup table up to 16 bits
            return mBit[y];
        }

        let y = y - 1;

        while ( i < y )
        {
            let x = x * x;
            let i = i + 1;
        }

        return x;
    }

    /** Returns x % y */
    function int mod(int x, int y) 
    {
        return ( x - ( ( x / y ) * y ) );
    }
}
