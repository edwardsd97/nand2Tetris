
Jack language extensions
------------------------------
[x] remove requirement for do and let
[x] compiler: provide better error information and catch more errors like trying to call methods from a function
[x] compiler: support static string allocation (uses String OS class extension to do so)
[x] allow for single line if/while/else blocks without {}s
[x] add support for 'for' loop statements
[x] allow function variable declarations without "var"
[x] allow class variable declarations without "field"
[x] allow variable declarations to also assign them to initial values (treat as let statement) int x = 5;
[x] allow function variable declarations while compiling any statement (push and pop symbol table scope within each {} )
[x] support operator precedence ( 5 + 6 * 2 ) should be 17 not 22
[x] allow class field read/write without accessor functions: object.fieldValue = 5; x = object.fieldArray[3];
[x] add support for 'continue' and 'break' commands inside a for/while
[x] add support for switch (case/default/break) statements (non-optimized)
[ ] add support for characters: '-' is 45 for example
[ ] add support for two character operators like == != ++ etc
[ ] add object inheritance - requires virtual objects to have a function table pointer built in
[ ] OS implement Memory.deFrag() (low priority)
[ ] optimize switch statements with a jump table when appropriate (low priority)

VM projects
------------------------------
[ ] implement a class that emulates the VM machine (32 bit) ( without keyboard input or display )
   (useful as a script language for any game with a sufficient game interface OS)
[ ] allow class static variable read/write without accessor functions: ClassName.staticField = 5; x = ClassName.staticArray[1];
    (oddly this requires a fresh VM machine as the default one requires that each class have its own isolated statics)
[ ] allow multiple classes per file
[ ] make int type 32 bit
[ ] add support for 32 bit float type

Hardware projects
------------------------------
[ ] Build the hardware! 
  - Use VHDL / Verilog to rewrite the HDL programs from N2T1
  - Commit these programs to FPGA board (~$100)
  - Or use a free FPGA emulator software

BUGS
------------------------------
[ ] global functions that follow a class are interpreted as being part of that class