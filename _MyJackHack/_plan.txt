
Compiler
------------------------------
[x] remove requirement for do and let
[x] provide better error information and catch more errors like trying to call methods from a function
[x] support static string allocation (uses String OS class extension to do so)
[x] allow for single line if/while/else blocks without {}s
[x] add support for 'for' loop statements
[x] allow function variable declarations without "var"
[x] allow class variable declarations without "field"
[x] allow variable declarations to also assign them to initial values (treat as let statement) int x = 5;
[x] allow function variable declarations while compiling any statement (push and pop symbol table scope within each {} )
[x] support operator precedence ( 5 + 6 * 2 ) should be 17 not 22
[x] allow class field read/write without accessor functions: object.fieldValue = 5; x = object.fieldArray[3];
[x] add support for 'continue' and 'break' commands inside a for/while
[x] add support for switch (case/default/break) statements (non-optimized)
[x] OS implement Memory.deFrag()
[x] add support for characters in code: '-' for 45 for example
[x] fixed global functions that follow a class being interpreted as being part of that class
[x] switch: fixed so that it is no longer using temp - stores the compiled code for the expression and keeps repeating it when comparing
[x] switch: fixed debugger tracking so that line number matching works
[x] optimize expression compiler to convert constants into a single push constant (resolve the expression during compile time) make this an option
[x] optimize expression compiler further - still not reducing all constants into a single push constant N
[ ] switch: case values should be required to be constants
[ ] switch: optimize with a jump table when appropriate (low priority)
[ ] allow array class object method calls: e.g. objectArray[3].myMethod();
[ ] add support for two character operators like == != ++ etc
[ ] Option.FUNCTION and Option.CLASS support working
[ ] add class inheritance? - requires virtual objects to have a function table pointer built in

Emulator
------------------------------
[x] implement a class that emulates the VM machine (32 bit) ( without keyboard input or display )
   (useful as a script language for any game with a sufficient game interface OS)
[x] allow class static variable read/write without accessor functions: ClassName.staticField = 5; x = ClassName.staticArray[1];
    (oddly this requires a fresh VM machine as the default one requires that each class have its own isolated statics)
[x] allow multiple classes per file
[x] make int type 32 bit
[ ] add support for 32 bit float type

VMEmulator Test app
------------------------------
[ ] Look at using SharpDevelop to build the code editor with - would be the developer tool for making a game with this ideally
[ ] Fix not being easily able to stop execution threads (window doesnt seem to be picking up events while thread is running)

Hardware projects
------------------------------
[ ] Build the hardware! 
  - Use VHDL / Verilog to rewrite the HDL programs from N2T1
  - Commit these programs to FPGA board (~$100)
  - Or use a free FPGA emulator software

BUGS
------------------------------
[x] fixed heap free/defrag runs into an exception accessing defragged memory as a pointer
